package gui;

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import dbconect.DAL_TaiKhoan;
import java.sql.ResultSet;

public class LoginForm extends JFrame {
    
    // Khai báo các components
    private JPanel mainPanel;
    private JLabel lblMaTK;
    private JLabel lblMatKhau;
    private JTextField txtMaTK;
    private JPasswordField txtMatKhau;
    private JButton btnConnect;
    private JButton btnExit;
    
    // Biến static để lưu mã tài khoản
    public static String MaTK;

    public LoginForm() {
        // Thiết lập cơ bản cho form
        setTitle("Đăng nhập hệ thống");
        setSize(350, 200);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null); // Căn giữa màn hình
        setResizable(false); // Không cho phép thay đổi kích thước

        // Khởi tạo components
        initComponents();
        // Thêm các sự kiện
        addEvents();
    }

    private void initComponents() {
        // Tạo panel chính với GridBagLayout
        mainPanel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(5, 5, 5, 5); // Khoảng cách giữa các components

        // Label và TextField cho Mã TK
        lblMaTK = new JLabel("Mã tài khoản:");
        txtMaTK = new JTextField(20);
        
        gbc.gridx = 0;
        gbc.gridy = 0;
        mainPanel.add(lblMaTK, gbc);
        
        gbc.gridx = 1;
        mainPanel.add(txtMaTK, gbc);

        // Label và PasswordField cho Mật khẩu
        lblMatKhau = new JLabel("Mật khẩu:");
        txtMatKhau = new JPasswordField(20);
        
        gbc.gridx = 0;
        gbc.gridy = 1;
        mainPanel.add(lblMatKhau, gbc);
        
        gbc.gridx = 1;
        mainPanel.add(txtMatKhau, gbc);

        // Panel cho các buttons
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));
        btnConnect = new JButton("Đăng nhập");
        btnExit = new JButton("Thoát");
        
        buttonPanel.add(btnConnect);
        buttonPanel.add(btnExit);

        gbc.gridx = 0;
        gbc.gridy = 2;
        gbc.gridwidth = 2;
        mainPanel.add(buttonPanel, gbc);

        // Thêm panel chính vào frame
        add(mainPanel);
    }

    private void addEvents() {
        // Sự kiện nút Đăng nhập
        btnConnect.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnConnect_Click();
            }
        });

        // Sự kiện nút Thoát
        btnExit.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                dispose();
            }
        });

        // Thêm sự kiện Enter cho txtMatKhau
        txtMatKhau.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if(e.getKeyCode() == KeyEvent.VK_ENTER) {
                    btnConnect_Click();
                }
            }
        });
    }

    private void btnConnect_Click() {
        try {
            DAL_TaiKhoan dal = new DAL_TaiKhoan();
            String maTK = txtMaTK.getText().trim();
            String matKhau = new String(txtMatKhau.getPassword()).trim();
            StringBuilder quyen = new StringBuilder(); // Thêm biến để nhận quyền
            
            ResultSet rs = dal.kiemTraDangNhap(maTK, matKhau, quyen); // Truyền biến quyen
            
            if (rs != null && rs.next()) {
                MaTK = maTK;
                // Sử dụng giá trị quyền từ StringBuilder
                String quyenValue = quyen.toString();
                
                // Mở form chính
                MainForm mainForm = new MainForm();
                mainForm.setQuyen(quyenValue);
                mainForm.setVisible(true);
                
                // Đóng form đăng nhập
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(this,
                    "Sai tên đăng nhập hoặc mật khẩu",
                    "Thông báo",
                    JOptionPane.ERROR_MESSAGE);
                txtMatKhau.setText("");
                txtMatKhau.requestFocus();
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this,
                "Lỗi: " + ex.getMessage(),
                "Lỗi",
                JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();
        }
    }

    public static void main(String[] args) {
        // Set Look and Feel
        try {
            UIManager.setLookAndFeel(
                UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }

        // Hiển thị form
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new LoginForm().setVisible(true);
            }
        });
    }
}











private void clearFields() {
    txtMaGV.setText("");
    txtTenGV.setText("");
    cboGioiTinh.setSelectedIndex(0);
    dtNgaySinh.setDate(null);
    txtTrinhDo.setText("");
    txtKhoa.setText("");
    txtGhichu.setText("");
}

private void addEvents() {
    btnThem.addActionListener(e -> btnThem_Click());
    btnSua.addActionListener(e -> btnSua_Click());
    btnXoa.addActionListener(e -> btnXoa_Click());
    btnLuu.addActionListener(e -> btnLuu_Click());
    btnHuy.addActionListener(e -> btnHuy_Click());
    btnLamMoi.addActionListener(e -> btnLamMoi_Click());
    btnThoat.addActionListener(e -> dispose());
    btnTim.addActionListener(e -> loadData(txtTenGVSearch.getText()));

    gridview.addMouseListener(new MouseAdapter() {
        @Override
        public void mouseClicked(MouseEvent e) {
            int row = gridview.getSelectedRow();
            if (row >= 0) {
                txtMaGV.setText(gridview.getValueAt(row, 0).toString());
                txtTenGV.setText(gridview.getValueAt(row, 1).toString());
                cboGioiTinh.setSelectedItem(gridview.getValueAt(row, 2).toString());
                // Xử lý ngày sinh
                try {
                    java.util.Date date = new java.text.SimpleDateFormat("yyyy-MM-dd")
                        .parse(gridview.getValueAt(row, 3).toString());
                    dtNgaySinh.setDate(date);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
                txtTrinhDo.setText(gridview.getValueAt(row, 4).toString());
                txtKhoa.setText(gridview.getValueAt(row, 5).toString());
                txtGhichu.setText(gridview.getValueAt(row, 6).toString());
            }
        }
    });
}

// Các phương thức xử lý sự kiện button
private void btnThem_Click() {
    clearFields();
    setControlState(false);
    luu = true;
}

private void btnSua_Click() {
    if (gridview.getRowCount() == 0) return;
    luu = false;
    setControlState(false);
    txtMaGV.setEnabled(false);
}

private void btnXoa_Click() {
    if (gridview.getRowCount() == 0) return;
    
    int result = JOptionPane.showConfirmDialog(this,
        "Có chắc chắn xóa giáo viên này không?",
        "Xác nhận",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.QUESTION_MESSAGE);
        
    if (result == JOptionPane.YES_OPTION) {
        String maGV = gridview.getValueAt(gridview.getSelectedRow(), 0).toString();
        try {
            dal.xoaGiaoVien(maGV);
            JOptionPane.showMessageDialog(this, "Xóa thành công");
            loadData("");
            setControlState(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                "Lỗi xóa giáo viên: " + e.getMessage(),
                "Lỗi",
                JOptionPane.ERROR_MESSAGE);
        }
    }
}

private void btnLuu_Click() {
    if (txtMaGV.getText().trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Mã giáo viên không được trống");
        txtMaGV.requestFocus();
        return;
    }
    if (txtTenGV.getText().trim().isEmpty()) {
        JOptionPane.showMessageDialog(this, "Tên giáo viên không được trống");
        txtTenGV.requestFocus();
        return;
    }
    if (dtNgaySinh.getDate() == null) {
        JOptionPane.showMessageDialog(this, "Ngày sinh không được trống");
        dtNgaySinh.requestFocus();
        return;
    }

    try {
        String ngaySinh = new java.text.SimpleDateFormat("yyyy-MM-dd")
            .format(dtNgaySinh.getDate());
            
        if (luu) {
            dal.themGiaoVien(
                txtMaGV.getText().trim(),
                txtTenGV.getText().trim(),
                cboGioiTinh.getSelectedItem().toString(),
                ngaySinh,
                txtTrinhDo.getText().trim(),
                txtKhoa.getText().trim(),
                txtGhichu.getText().trim()
            );
            JOptionPane.showMessageDialog(this, "Thêm thành công");
        } else {
            dal.suaGiaoVien(
                txtMaGV.getText().trim(),
                txtTenGV.getText().trim(),
                cboGioiTinh.getSelectedItem().toString(),
                ngaySinh,
                txtTrinhDo.getText().trim(),
                txtKhoa.getText().trim(),
                txtGhichu.getText().trim()
            );
            JOptionPane.showMessageDialog(this, "Sửa thành công");
        }
        loadData("");
        setControlState(true);
    } catch (Exception ex) {
        JOptionPane.showMessageDialog(this,
            "Lỗi: " + ex.getMessage(),
            "Lỗi",
            JOptionPane.ERROR_MESSAGE);
    }
}

private void btnHuy_Click() {
    loadData("");
    setControlState(true);
    if (gridview.getRowCount() > 0) {
        gridview.setRowSelectionInterval(0, 0);
        // Trigger cell click event
        gridview.getSelectionModel().setSelectionInterval(0, 0);
    }
}

private void btnLamMoi_Click() {
    txtTenGVSearch.setText("");
    loadData("");
    setControlState(true);
    if (gridview.getRowCount() > 0) {
        gridview.setRowSelectionInterval(0, 0);
        // Trigger cell click event
        gridview.getSelectionModel().setSelectionInterval(0, 0);
    }
}